{
  "version": 3,
  "sources": [
    "../../hello_world/contract.py"
  ],
  "mappings": ";;;;;AAWA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AACK;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEiB;AACP;AACC;AAA6B;;;AAC7B;AAA6B;;;AAC/B;;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAAA;;AANT;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 2"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "bz main___algopy_default_create@5",
      "stack_out": []
    },
    "10": {
      "op": "pushbytes 0x2f35ea4d // method \"companyhashCode(string,string)byte[]\"",
      "defined_out": [
        "Method(companyhashCode(string,string)byte[])"
      ],
      "stack_out": [
        "Method(companyhashCode(string,string)byte[])"
      ]
    },
    "16": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(companyhashCode(string,string)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(companyhashCode(string,string)byte[])",
        "tmp%2#0"
      ]
    },
    "19": {
      "op": "match main_companyhashCode_route@3",
      "stack_out": []
    },
    "23": {
      "op": "err"
    },
    "24": {
      "block": "main_companyhashCode_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "26": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "27": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "29": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "30": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "31": {
      "op": "b companyhashCode"
    },
    "34": {
      "block": "main___algopy_default_create@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "36": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "37": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "39": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "40": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "41": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "42": {
      "subroutine": "smart_contracts.hello_world.contract.companyID.companyhashCode[routing]",
      "params": {},
      "block": "companyhashCode",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "wallet#0"
      ],
      "stack_out": [
        "wallet#0"
      ]
    },
    "45": {
      "op": "dup",
      "defined_out": [
        "wallet#0",
        "wallet#0 (copy)"
      ],
      "stack_out": [
        "wallet#0",
        "wallet#0 (copy)"
      ]
    },
    "46": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "wallet#0",
        "wallet#0 (copy)"
      ],
      "stack_out": [
        "wallet#0",
        "wallet#0 (copy)",
        "0"
      ]
    },
    "47": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "wallet#0"
      ],
      "stack_out": [
        "wallet#0",
        "aggregate%array_length%0#0"
      ]
    },
    "48": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "wallet#0"
      ],
      "stack_out": [
        "wallet#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "49": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "wallet#0"
      ],
      "stack_out": [
        "wallet#0",
        "add%0#0"
      ]
    },
    "50": {
      "op": "dig 1",
      "stack_out": [
        "wallet#0",
        "add%0#0",
        "wallet#0 (copy)"
      ]
    },
    "52": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "wallet#0"
      ],
      "stack_out": [
        "wallet#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "53": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "wallet#0"
      ],
      "stack_out": [
        "wallet#0",
        "eq%0#0"
      ]
    },
    "54": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "wallet#0"
      ]
    },
    "55": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "companyname#0",
        "wallet#0"
      ],
      "stack_out": [
        "wallet#0",
        "companyname#0"
      ]
    },
    "58": {
      "op": "dup",
      "defined_out": [
        "companyname#0",
        "companyname#0 (copy)",
        "wallet#0"
      ],
      "stack_out": [
        "wallet#0",
        "companyname#0",
        "companyname#0 (copy)"
      ]
    },
    "59": {
      "op": "intc_0 // 0",
      "stack_out": [
        "wallet#0",
        "companyname#0",
        "companyname#0 (copy)",
        "0"
      ]
    },
    "60": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "companyname#0",
        "wallet#0"
      ],
      "stack_out": [
        "wallet#0",
        "companyname#0",
        "aggregate%array_length%1#0"
      ]
    },
    "61": {
      "op": "intc_1 // 2",
      "stack_out": [
        "wallet#0",
        "companyname#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "62": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "companyname#0",
        "wallet#0"
      ],
      "stack_out": [
        "wallet#0",
        "companyname#0",
        "add%1#0"
      ]
    },
    "63": {
      "op": "dig 1",
      "stack_out": [
        "wallet#0",
        "companyname#0",
        "add%1#0",
        "companyname#0 (copy)"
      ]
    },
    "65": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "companyname#0",
        "len%1#0",
        "wallet#0"
      ],
      "stack_out": [
        "wallet#0",
        "companyname#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "66": {
      "op": "==",
      "defined_out": [
        "companyname#0",
        "eq%1#0",
        "wallet#0"
      ],
      "stack_out": [
        "wallet#0",
        "companyname#0",
        "eq%1#0"
      ]
    },
    "67": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "wallet#0",
        "companyname#0"
      ]
    },
    "68": {
      "op": "concat",
      "defined_out": [
        "input_bytes#0"
      ],
      "stack_out": [
        "input_bytes#0"
      ]
    },
    "69": {
      "op": "sha256",
      "defined_out": [
        "code#0"
      ],
      "stack_out": [
        "code#0"
      ]
    },
    "70": {
      "op": "dup",
      "defined_out": [
        "code#0",
        "code#0 (copy)"
      ],
      "stack_out": [
        "code#0",
        "code#0 (copy)"
      ]
    },
    "71": {
      "op": "extract 7 5",
      "defined_out": [
        "code#0",
        "part1#0"
      ],
      "stack_out": [
        "code#0",
        "part1#0"
      ]
    },
    "74": {
      "op": "swap",
      "stack_out": [
        "part1#0",
        "code#0"
      ]
    },
    "75": {
      "op": "extract 16 3",
      "defined_out": [
        "part1#0",
        "part2#0"
      ],
      "stack_out": [
        "part1#0",
        "part2#0"
      ]
    },
    "78": {
      "op": "extract 2 0",
      "defined_out": [
        "extract_to_end%0#0",
        "part1#0"
      ],
      "stack_out": [
        "part1#0",
        "extract_to_end%0#0"
      ]
    },
    "81": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0"
      ]
    },
    "82": {
      "op": "dup",
      "defined_out": [
        "concat%0#0",
        "concat%0#0 (copy)"
      ],
      "stack_out": [
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "83": {
      "op": "extract 2 0",
      "defined_out": [
        "concat%0#0",
        "extract_to_end%1#0"
      ],
      "stack_out": [
        "concat%0#0",
        "extract_to_end%1#0"
      ]
    },
    "86": {
      "op": "len",
      "stack_out": [
        "concat%0#0",
        "len%0#0"
      ]
    },
    "87": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "88": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "91": {
      "op": "replace2 0",
      "defined_out": [
        "res#0"
      ],
      "stack_out": [
        "res#0"
      ]
    },
    "93": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "res#0"
      ],
      "stack_out": [
        "res#0",
        "0x151f7c75"
      ]
    },
    "99": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "res#0"
      ]
    },
    "100": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "101": {
      "op": "log",
      "stack_out": []
    },
    "102": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "104": {
      "op": "return",
      "stack_out": []
    }
  }
}