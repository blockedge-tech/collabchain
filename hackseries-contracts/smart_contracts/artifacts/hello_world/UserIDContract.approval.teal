#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 2
    // hello_world/contract.py:5
    // class UserIDContract(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@5
    pushbytes 0xd056cd36 // method "generate_user_id(string,string,string,string)byte[]"
    txna ApplicationArgs 0
    match main_generate_user_id_route@3
    err

main_generate_user_id_route@3:
    // hello_world/contract.py:6
    // @abimethod()
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b generate_user_id

main___algopy_default_create@5:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// smart_contracts.hello_world.contract.UserIDContract.generate_user_id[routing]() -> void:
generate_user_id:
    // hello_world/contract.py:6
    // @abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+utf8[])
    txna ApplicationArgs 2
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+utf8[])
    txna ApplicationArgs 3
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+utf8[])
    txna ApplicationArgs 4
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for (len+utf8[])
    // hello_world/contract.py:8
    // input_bytes = Wallet.bytes + name.bytes + company.bytes + event.bytes
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // hello_world/contract.py:9
    // user_id = sha256(input_bytes)
    sha256
    // hello_world/contract.py:6
    // @abimethod()
    pushbytes 0x151f7c750020
    swap
    concat
    log
    pushint 1 // 1
    return
